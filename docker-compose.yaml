version: '3.8'

services:

  # Data Pipeline Service
  # data-pipeline:
  #   build:
  #     context: ..
  #     dockerfile: docker/Dockerfile
  #   container_name: retail-data-pipeline
  #   depends_on:
  #     mysql-db:
  #       condition: service_healthy
  #     postgres-db:
  #       condition: service_healthy
  #   environment:
  #     ENV: ${ENV:-dev}
  #   volumes:
  #     - ../logs:/app/logs
  #   networks:
  #     - retail-network

  # MySQL Service
  mysql-db:
    image: mysql:5.6
    container_name: retail-mysql
    volumes:
      - mysql-data:/var/lib/mysql
      - ./src/db/init/mysql-init:/docker-entrypoint-initdb.d
    environment:
      MYSQL_DATABASE: retail_db
      MYSQL_USER: ${SOURCE_DB_USER:-retail_user}
      MYSQL_PASSWORD: ${SOURCE_DB_PASS}
      MYSQL_ROOT_PASSWORD: ${SOURCE_DB_ROOT_PASS}
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u $$MYSQL_USER --password=$$MYSQL_PASSWORD"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - retail-network

  # PostgreSQL Service
  postgres-db:
    image: postgres:13
    container_name: retail-postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/db/init/postgres-init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: retail_db
      POSTGRES_USER: ${TARGET_DB_USER:-retail_pg_user}
      POSTGRES_PASSWORD: ${TARGET_DB_PASS}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - retail-network

volumes:
  mysql-data:
  postgres-data:

networks:
  retail-network:
    driver: bridge